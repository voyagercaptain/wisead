<?xml version="1.0" encoding="UTF-8"?>
<!-- ====================================================================== 
     2014. 04. 03.                                                         

     wiseda build    
                   
     Insomnia                                                                
     ====================================================================== -->
<project name="wiseda" default="build" xmlns:artifact="antlib:org.apache.maven.artifact.ant">
    <description>
	    <![CDATA[
    	WISE DA(portal), META, DQ product build  
	    ]]>     
    </description>
	
	<!--퍼로퍼티 파일 지정 -->
	<property file="build.properties" />
	
	<property name="project.name" value="wiseda"/>

	 <condition property="build.env" value="${build.env}" else="local">
	         <isset property="build.env" />
	 </condition>

	<!--퍼로퍼티 설정 : 각종 폴더 & 생성파일 -->
	<property name="base.dir" value="."/>
	<property name="src.dir" value="src/main/java" />
	<property name="resources.dir" value="src/main/resources" />
	<property name="web.dir" value="src/main/webapp"/>
	<property name="dist.dir" value="target"/>
	<property name="build.dir" value="${web.dir}/WEB-INF/classes"/>
	<property name="wls.lib.path" value="${wls.home}/server/lib"/>
	<property name="war.file" value="${dist.dir}/${project.name}.war"/>
	<property name="ear.file" value="${dist.dir}/${project.name}.ear"/>
	
	<!-- ftp 설정 (건보설정)-->
	<property name="ftp.server" value="10.1.60.56"/>
	<property name="ftp.id" 	value="wmeta"/>
	<property name="ftp.pass" 	value="QhaQha33"/>
	<property name="ftp.remote" value="/usr/ssw/wmeta/build/portal"/>

		
	<!-- 컴파일 패스 설정 : 웹 라이브러리 위치 (WEB-INF/lib), 톰캣 라이브러리 추가(tomcat/lib) -->
	<!-- - - - - - - - - - - - - - - - - - 
          target: default                      
         - - - - - - - - - - - - - - - - - -->
	
	<path id="maven-ant-tasks.classpath" path="doc/build/maven-ant-tasks-2.1.3.jar" />
	<typedef resource="org/apache/maven/artifact/ant/antlib.xml"
			 uri="antlib:org.apache.maven.artifact.ant"
		 	 classpathref="maven-ant-tasks.classpath" />
	
	<!-- 환경변수 사용하도록 선언 -->
	<property environment="env"/>
	
	<echo message="maven-home.path : ${env.Path}" />
	<property name="maven-home.path" value="${env.M2_HOME}" />
	
    	<echo message="tomcat lib path define" />
		<path id="dev.project.classpath">
			<pathelement location="${web.dir}/WEB-INF/lib"/>
			<fileset dir="${web.dir}/WEB-INF/lib">
				<include name="*.jar"/>
			</fileset>
			<pathelement location="${tomcat.home.dev}/lib"/>
			<fileset dir="${tomcat.home.dev}/lib">
				<include name="*.jar"/>
			</fileset>
		</path>
		<echo message="weblogic lib path define" />
		<path id="prod.project.classpath" >
			<pathelement location="${web.dir}/WEB-INF/lib"/>
			<fileset dir="${web.dir}/WEB-INF/lib">
				<include name="*.jar"/>
			</fileset>
			
			<!-- 웹로직 패스 설정
			-->
			<pathelement location="${wls.lib.path}"/>
			<fileset dir="${wls.lib.path}">
				<include name="*.jar"/>
			</fileset>
		</path>
	
	<include file="buildinc.${build.env}.xml"/>
	
    <target name="pathset">
    	<antcall target="buildpath-${build.env}"/>
    </target>

    	<!-- - - - - - - - - - - - - - - - - - 
              catalina-ant의 task 설정                      
		<echo message="tomcat task define" />
    	<taskdef resource="org/apache/catalina/ant/catalina.tasks">
    		<classpath>
    			<fileset file="${tomcat.home.dev}/bin/tomcat-juli.jar" />
    			<fileset file="${tomcat.home.dev}/lib/jasper.jar" />
    			<fileset file="${tomcat.home.dev}/lib/servlet-api.jar" />
    			<fileset file="${tomcat.home.dev}/lib/catalina-ant.jar" />
    		</classpath>
    	</taskdef>
             - - - - - - - - - - - - - - - - - -->
	
		<!-- 웹로직 ant task 설정
		<echo message="weblogic task define" />
			<taskdef name="wlserver" 
					 classname="weblogic.ant.taskdefs.management.WLServer" 
					 classpath="${wls.lib.path}/weblogic.jar" /> 
			<taskdef name="wldeploy" 
					classname="weblogic.ant.taskdefs.management.WLDeploy"
					classpath="${wls.lib.path}/weblogic.jar"/>
			<taskdef name="wlcompile" 
					classname="weblogic.ant.taskdefs.build.WLCompileTask"
					classpath="${wls.lib.path}/weblogic.jar"/>	
			<taskdef name="wlpackage" 
					classname="weblogic.ant.taskdefs.build.WLPackageTask"
					classpath="${wls.lib.path}/weblogic.jar"/>	
			<taskdef name="wlappc" 
					classname="weblogic.ant.taskdefs.j2ee.Appc"
					classpath="${wls.lib.path}/weblogic.jar"/>	
		-->
	
	<!-- ================================= 
          target: mvn-war              
         ================================= -->
    <target name="mvnwar" depends="" description="">
		<artifact:mvn pom="pom.xml" mavenHome="C:/IDE/apache-maven-3.0.5" >
    		<arg value="war:exploded"/>
    	</artifact:mvn>
    </target>

	
	<!-- ================================= 
          target: clean              
         ================================= -->
    <target name="clean" description="delete build, dist">
    	<!--
        <delete dir="${dist.dir}" />
        -->
        <delete dir="${build.dir}" />
    </target>
	
	<!-- ================================= 
          target: datentime              
         ================================= -->
    <target name="datentime" description="create current date">
        <tstamp>
        	<format property="DSTAMP" pattern="yyyy-MM-dd"/>
        	<format property="TSTAMP" pattern="HH:mm:ss"/>
        </tstamp>
    	<echo message="Build started at : ${DSTAMP} - ${TSTAMP}" />
    </target>
	
	<!-- ================================= 
          target: prepare              
         ================================= -->
    <target name="prepare" depends="datentime, clean" description="copy web contents">
        <!--
    	<mkdir dir="${dist.dir}"/>
        <mkdir dir="${build.dir}"/>
    	<copy todir="${build.dir}">
    		<fileset dir="${web.dir}">
    			<exclude name="**/*.class"/>
    			<exclude name="**/*.java"/>
    		</fileset>
    	</copy>
        -->
		<mkdir dir="${web.dir}/WEB-INF/classes" />
    	<copy todir="${web.dir}/WEB-INF/classes">
			<fileset dir="${src.dir}" >
				<exclude name="**/*.java"/>
			</fileset>
		</copy>
    	<copy todir="${web.dir}/WEB-INF/classes">
			<fileset dir="${resources.dir}" >
				<exclude name="**/*.java"/>
			</fileset>
		</copy>
		<antcall target="postpre.${build.env}" />
    </target>
	
	<target name="postpre.dev">
		
    	<!--lib 파일 복사 (servlet-api, jsp-api 는 제외) -->    		
		<antcall target="copylib" />
    	<!--tomcat 설청파일 복사 -->    		
    	<copy 	file="${resources.dir}/wasconfig/${project.name}.${build.env}.xml" 
				tofile="${web.dir}/WEB-INF/classes/wasconfig/${project.name}.xml" 
				overwrite="true"/>
    	<!--스프링 설정 파일 복사 -->    		
    	<copy 	file="${resources.dir}/properties/configure.${build.env}.properties" 
				tofile="${web.dir}/WEB-INF/classes/properties/configure.properties" 
				overwrite="true"/>
	</target>
	<target name="postpre.prod">
    	<!--스프링 설정 파일 복사 -->    		
    	<copy 	file="${resources.dir}/spring/${build.env}.app-context.xml" 
				tofile="${web.dir}/WEB-INF/classes/spring/app-context.xml" 
				overwrite="true"/>
    	<!--스프링 설정 파일 복사 -->    		
    	<copy 	file="${resources.dir}/properties/configure.${build.env}.properties" 
				tofile="${web.dir}/WEB-INF/classes/properties/configure.properties" 
				overwrite="true"/>
	</target>

	<!-- ================================= 
          target: build              
         ================================= -->
    <target name="build" depends="prepare" description="compile java">
    	<javac srcdir="${src.dir}"
	       destdir="${web.dir}/WEB-INF/classes"
	       debug="${compile.debug}"
	       target="${compile.target}"
           encoding="${compile.encoding}"
    	   classpathref="${build.env}.project.classpath">
		</javac>
    	<!--
    	   failonerror="off"
    	<copy todir="${web.dir}/WEB-INF/classes" overwrite="true">
    		<fileset dir="${build.dir}/WEB-INF/classes" />
    	</copy>
	       optimize="${compile.optimize}"
    	   includeantruntime="false"
    		<compilerarg value="-Xlint:unchecked"/>
    		<compilerarg value="-Xlint:deprecation"/>
    	   target="1.5"
    	   source="1.5"
	       deprecation="${compile.deprecation}"
    	<copy todir="${build.dir}/WEB-INF/classes">
    		<fileset dir="${src.dir}" excludes="**/*.java, **/*.properties" />
    		<fileset dir="${resources.dir}" excludes="**/*.java" />
    	</copy>
    	<copy 	file="${resources.dir}/kca-log4j.properties" 
				tofile="${build.dir}/WEB-INF/classes/log4j.properties" 
				overwrite="true"/>
    			<native2ascii src="${src.home}"
    			              dest="${build.home}/WEB-INF/classes"
    			              includes="**/*.properties" />
    			<native2ascii src="${conf.home}"
    			              dest="${build.home}/WEB-INF/classes"
    			              includes="**/*.properties" />
    	-->
    </target>
	
	<!-- ================================= 
          target: sync              
         ================================= -->
    <target name="sync">
    	<antcall target="sync.${build.env}"/>
    </target>
    <target name="sync.dev" depends="" description="sync build">
    	<sync todir="${tomcat.config.dev}">
    	  <fileset dir="${web.dir}"/>
    	</sync>
    </target>
    <target name="sync.prod" depends="" description="sync build" >
    	<sync todir="${wls.apppath}" >
    	  <fileset dir="${base.dir}" >
    	  		<exclude name="/lib/*"/>
    	  		<!--
    	  		<exclude name="**/upload_files/**"/>
    	  		<exclude name="**/tmp_files/**"/>
    	  		-->
    	  </fileset>
    		<preserveintarget>
    		    <include name="**/templates/**"/>
    		    <include name="**/upload_files/**"/>
    		    <include name="**/tmp_files/**"/>
    		</preserveintarget>
    	</sync>
    </target>
	
	<!-- ================================= 
          target: stop was app (dev-tomcat, prod-weblogic)                
         ================================= -->
    <target name="stop">
    	<antcall target="stop.${build.env}"/>
    </target>
    <target name="stop.dev" depends="" description="wisedq stop">
        <stop url="${tomcat.url}"
        	  username="${tomcat.user}"
    		  password="${tomcat.pass}"
        	  path="${tomcat.apppath}"
        	/>
    </target>
    <target name="stop.prod" depends="" description="weblogic stop">
        <wldeploy 
        	action="stop" verbose="true" debug="true"
        	name="${wls.appname}"
        	user="${wls.username}"
        	password="${wls.password}"
    		adminurl="${wls.adminurl}"
        />
    </target>

	<!-- ================================= 
          target: start              
         ================================= -->
    <target name="start">
    	<antcall target="start.${build.env}"/>
    </target>
    <target name="start.dev" depends="" description="wisedq start">
    	<start url="${tomcat.url}"
    	       username="${tomcat.user}"
    	       password="${tomcat.pass}"
    	       path="${tomcat.apppath}"
    	/>
    </target>
    <target name="start.prod" depends="" description="weblogic start">
        <wldeploy 
        	action="start" verbose="true" debug="true"
        	name="${wls.appname}"
        	user="${wls.username}"
        	password="${wls.password}"
    		adminurl="${wls.adminurl}"
        />
    </target>

	<!-- ================================= 
          target: undeploy              
         ================================= -->
    <target name="undeploy">
    	<antcall target="undeploy.${build.env}"/>
    </target>
    <target name="undeploy.dev" depends="context.status" if="context.undeployable" description="wisedq undeploy">
    	<undeploy url="${tomcat.url}"
    	       username="${tomcat.user}"
    	       password="${tomcat.pass}"
    		   path="${tomcat.apppath}"
    	/>
    </target>
    <target name="undeploy.pord" depends="" description="weblogic undeploy">
        <wldeploy 
        	action="undeploy" verbose="true" debug="true"
        	name="${wls.appname}"
        	user="${wls.username}"
        	password="${wls.password}"
    		adminurl="${wls.adminurl}"
    		targets="${wls.targets}"
    		failonerror="true"
        />
    </target>
	<!-- ================================= 
          target: deploy              
         ================================= -->
    <target name="deploy">
    	<antcall target="deploy.${build.env}"/>
    </target>
    <target name="deploy.dev" depends="context.status" if="context.notInstalled" description="wisedq deploy">
    	<deploy url="${tomcat.url}"
    	       username="${tomcat.user}"
    	       password="${tomcat.pass}"
    		   config="${tomcat.config.dev}/WEB-INF/classes/wasconfig/${project.name}.xml"
    	       path="${tomcat.apppath}"
    	/>
    </target>
    <target name="deploy.prod" depends="" description="weblogic deploy">
        <wldeploy 
        	action="deploy" verbose="true" debug="true"
        	name="${wls.appname}"
        	source="${wls.source}"
        	user="${wls.username}"
        	password="${wls.password}"
    		adminurl="${wls.adminurl}"
    		targets="${wls.targets}"
        	nostage="true"
    		failonerror="true"
        />
    </target>
	<!-- ================================= 
          target: redeploy (dev-tomcat, prod-weblogic)              
         ================================= -->
    <target name="redeploy">
    	<antcall target="redeploy.${build.env}"/>
    </target>
    <target name="redeploy.prod" depends="" description="weblogic redeploy">
        <wldeploy 
        	action="redeploy" verbose="true" debug="true"
        	name="${wls.appname}"
        	source="${wls.source}"
        	user="${wls.username}"
        	password="${wls.password}"
    		adminurl="${wls.adminurl}"
    		targets="${wls.targets}"
        	nostage="true"
    		failonerror="true"
        />
    </target>
	
	<!-- ================================= 
          target: list              
         ================================= -->
    <target name="list" depends="" description="tomcat deploy list">
        <list url="${tomcat.url}"
    	       username="${tomcat.user}"
    	       password="${tomcat.pass}"
        />
    </target>
	<!-- ================================= 
          target: tomcat service stop              
         ================================= -->
    <target name="tomcatstop" depends="" description="tomcat stop">
        <exec command="net stop Tomcat6" />
    </target>
	
	<!-- ================================= 
	      target: tomcat service start              
         ================================= -->
    <target name="tomcatstart" depends="" description="tomcat start">
        <exec command="net start Tomcat6" />
    </target>	

	<!-- ================================= 
          target: context.status              
         ================================= -->
    <target name="context.status">
		<property name="running" value="${tomcat.apppath}:running"/>
		<property name="stopped" value="${tomcat.apppath}:stopped"/>
	
    	<list url="${tomcat.url}"
   	          username="${tomcat.user}"
    	      password="${tomcat.pass}"
			  outputproperty="ctx.status"
    	/>
    	<echo  message="${ctx.status}" />
		<condition property="context.running">
			<contains string="${ctx.status}" substring="${running}"/>
		</condition>
		<condition property="context.stopped">
			<contains string="${ctx.status}" substring="${stopped}"/>
		</condition>
		<condition property="context.notInstalled">
			<and>
				<isfalse value="${context.running}"/>
				<isfalse value="${context.stopped}"/>
			</and>
		</condition>
    	<!--
		<condition property="context.deployable">
			<or>
				<istrue value="${context.notInstalled}"/>
				<and>
					<istrue value="${context.running}"/>
					<istrue value="${mgr.update}"/>
				</and>
				<and>
					<istrue value="${context.stopped}"/>
					<istrue value="${mgr.update}"/>
				</and>
			</or>
		</condition>
		-->
		<condition property="context.undeployable">
			<or>
				<istrue value="${context.running}"/>
				<istrue value="${context.stopped}"/>
			</or>
		</condition>
	</target>
	
	<!-- ================================= 
          target: comfirm              
         ================================= -->
    <target name="comfirm" depends="context.status" description="description">
	    <fail message="${project.name} is not running">
	    	<condition>
	    	<not>
	    		<istrue value="${context.running}" />
	    	</not>
	    	</condition>
	    </fail>
    </target>	
	
	<!-- ================================= 
          target: antzip              
         ================================= -->
    <target name="sourcezip" depends="datentime" description="description">
        <zip destfile="${dist.dir}/${project.name}_${DSTAMP}.zip"
    		 basedir="${base.dir}/" 
        	 excludes="**/target/**"
        	 encoding="UTF-8"
        	>
        </zip>
    </target>
	
	<!-- ================================= 
          target: antunzip              
         ================================= -->
    <target name="sourceunzip" depends="" description="description">
    	<delete dir="${base.dir}" excludes="**/*.zip,.**/*.xml,**/*.properties,**/lib/*.jar">
    			
    	</delete>
    	<unzip  dest="${base.dir}" encoding="UTF-8" overwrite="ture">
    		<fileset dir=".">
    	        <include name="**/${project.name}_*.zip"/>
    		</fileset>
    	</unzip>
    	<copy todir="${web.dir}/WEB-INF/lib" >
    		<fileset dir="${base.dir}/lib" />
    	</copy>
    	  <delete>
    	    <fileset dir="." includes="**/${project.name}_*.zip"/>
    	  </delete>
    </target>
	
	<!-- ================================= 
          target: copylib              
         ================================= -->
    <target name="copylib" depends="" description="web lib copy">
    	<copy todir="${web.dir}/WEB-INF/lib" >
    		<fileset dir="${dist.dir}/lib" excludes="servlet-api-2.5.jar, jsp-api-2.1.jar" />
    	</copy>
    </target>

	
	<!-- ================================= 
          target: antftp              
         ================================= -->
    <target name="sourceftpsend" depends="sourcezip" description="">
        <ftp password="${ftp.pass}" 
        	server="${ftp.server}" 
        	userid="${ftp.id}"
        	remotedir="${ftp.remote}"
        	binary="yes"
        	separator="/"
    		verbose="yes" 
        	>
        	<!-- 
	        	skipFailedTransfers="true" 
	        	passive="yes"
        	-->
        	<fileset dir="${dist.dir}" >
        		<include name="*.zip"/>
        		<!-- <include name="/lib/*.jar"/> -->
        	</fileset>
        	<fileset dir="${base.dir}" >
        		<include name="build*"/>
        	</fileset>
        	<!-- <fileset dir="${src.dir}" includes="images/" />-->
        </ftp>
    	<delete file="${dist.dir}/*.zip">
    	 </delete>
    </target>
	
</project>
