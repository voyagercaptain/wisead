<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
		http://www.springframework.org/schema/aop 
	    http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
        http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
        http://www.springframework.org/schema/mvc 
        http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.2.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- * Enables the Spring MVC @Controller programming model 
	     * 컨트롤러에서 자주사용되는 validator, conversionService, 
	        messageConverter, MappedInterceptor를 자동으로 등록하는 간편 빈 설정 태그 
	 -->
<!-- 	<mvc:annotation-driven/> -->
	
	<!-- * 어노테이션 사용을 위해설정(@Required(setter메서드사용), 
	     *   @Autowired(의존관계 자동설정 - type으로연결), @Resource(의존관계 자동설정 - name으로연결))  
	 -->
	<context:annotation-config /> 
	
	<!-- * Imports user-defined @Controller beans that process client requests 
	     * 파일추가설정  
	 -->		
	<import resource="controller-context.xml" />
 	
 	<tx:annotation-driven transaction-manager="transactionManager" />
    
    <!--* URL 요청시 HandlerInterceptor를 구현한 클래스를 interceptors에 등록하면 
          메서드 실행전후에 필요한 코드가 실행된다
        * 모든 요청, 선언에 대해서 dispatcher가 가로채는 인터셉터 등록
        ** 특정 패턴의 URL에만 인터셉터를 적용할 때 interceptor를 사용한다 
        * bean은 컨테이너가 만들고 관리하는 객체이다(DI기법사용)
        ** DI(의존성주입)는 스프링 컨테이너가 객체를 주입하는 기법이다
        ** 객체의 생성을 class에서 하지 않는다
      -->
	<mvc:interceptors>
		<mvc:interceptor>
		  <mvc:mapping path="/*main*"/>
		  <mvc:mapping path="/portal/**"/>
		  <mvc:mapping path="/commons/**"/>
		  <mvc:mapping path="/meta/**"/> 		 
		  <mvc:mapping path="/dq/**"/>
		  <mvc:mapping path="/admin/**"/> 		 
		  <mvc:mapping path="/fintech/**"/> 		 
		  <mvc:mapping path="/advisor/**"/> 		 
		  <bean class="kr.wise.commons.handler.SessionCheckInterceptor" >
		  	<!-- 인증 체크가 필요 없는 URL 리스트  -->
			<property name="permittedURL">
				<set>
					<value>/login.do</value>
					<value>/ssologinexec.do</value>
					<value>/loginform.do</value>
					<value>/ssologin.do</value>
<!-- 					<value>/uat/uia/[a-zA-Z]+\.do</value> -->
<!-- 					<value>/EgovLeft.do</value> -->
<!-- 					<value>/uat/uia/actionLogin.do</value> -->
				</set>
			</property>
		  </bean>
		</mvc:interceptor>
 		<mvc:interceptor>
			<mvc:mapping path="/*main*"/>
			<mvc:mapping path="/portal/**"/>
		  	<mvc:mapping path="/commons/**"/>
		    <mvc:mapping path="/meta/**"/> 		 
		    <mvc:mapping path="/dq/**"/>
		    <mvc:mapping path="/admin/**"/> 		 
		  	<mvc:mapping path="/fintech/**"/>
		  	<mvc:mapping path="/advisor/**"/> 		 
		<bean class="kr.wise.commons.handler.PageNavigationInterceptor" >
			<!-- 메뉴체크가 필요 없는 URL 리스트  -->
			<property name="permittedURL">
				<set>
					<value>/login.do</value>
					<value>/ssologinexec.do</value>
					<value>/loginform.do</value>
					<value>/ssologin.do</value> 					
					<value>[\S]*/ajaxgrid/[\S]*</value>
					<value>[\S]*/popup/[\S]*</value>
<!-- 					<value>/[a-zA-z0-9]+\.jsp</value> -->
<!-- 					<value>/uat/uia/[a-zA-Z]+\.do</value> -->
<!-- 					<value>/EgovLeft.do</value> -->
<!-- 					<value>/uat/uia/actionLogin.do</value> -->
				</set>
			</property>
		
		</bean>
		</mvc:interceptor>
<!-- 		Client IP 정보 획득  -->
<!-- 		<mvc:interceptor>
			<mvc:mapping path="/main*"/>
			<mvc:mapping path="/portal/**"/>
		  	<mvc:mapping path="/commons/**"/>
		    <mvc:mapping path="/meta/**"/> 		 
		Client IP 정보 획득 
		<bean class="kr.wise.commons.handler.IpObtainInterceptor" />
		</mvc:interceptor> -->
<!-- 		웹로그 접속 로그 저장  -->
		<mvc:interceptor>
			<mvc:mapping path="/*main*"/>
			<mvc:mapping path="/portal/**"/>
		  	<mvc:mapping path="/commons/**"/>
		    <mvc:mapping path="/meta/**"/>
		    <mvc:mapping path="/dq/**"/>  		 
		    <mvc:mapping path="/admin/**"/>
		    <mvc:mapping path="/fintech/**"/>
		    <mvc:mapping path="/advisor/**"/>  		 
		<bean class="kr.wise.commons.handler.WebLogInterceptor" />
		</mvc:interceptor> 

		
		<!-- 국제화 지원 인터셉터 -->
		<!-- <bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor" />  -->
<!-- 		<bean class="kr.wise.egmd.handler.TestInterceptor" /> -->
		
	<!--
		<bean class="org.springframework.web.servlet.mvc.WebContentInterceptor" />
	 -->
	</mvc:interceptors>
	
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	 
	<mvc:resources mapping="/img/**" location="/img/" />
<!-- 	<mvc:resources mapping="/images/**" location="/images/" />
	<mvc:resources mapping="/js/**"     location="/js/" />	 	
	<mvc:resources mapping="/css/**"    location="/css/" />
	<mvc:resources mapping="/font/**"    location="/font/" /> -->
<!-- 	<mvc:resources mapping="/swffile/**"    location="/swffile/" /> -->
		
	 
	<!-- dispatcherServlet의 URL 요청이 컨트롤러에 매핑되지 않으면 필터링한다(자바스크립트, CSS 등)  --> 	 	
<!-- 	<mvc:default-servlet-handler/>  -->
	<import resource="servlet-profile-context.xml" />
	
	
	<!-- localeResolver bean 객체 생성(가로챈 locale을 Cookie에 저장함)  -->
	<!--  <bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver" /> -->
	
	<bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver" /> 
	
	<!-- * messageSource bean 객체 생성(메세지를 사용할 수 있도록 함)  
	     * 컬렉션 타입 프로퍼티설정 <list> 사용(java.util.List)
	 -->
<!-- 	<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>classpath:/messages/message</value>				
				<value>classpath:/properties/idgnr</value>				
			</list>
		</property>
		<property name="cacheSeconds" value="0" />
	</bean> -->
	
	<!-- * Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory 
	     * 뷰 리졸버를 지정하지 않았을 때 자동등록되는 디폴트 뷰 리졸버이며 주로 JSP를 뷰로 사용
	     * prefix는 앞의 경로를 suffix는 파일 확장자를 생략하게 설정한다
	     * 논리적인 뷰 이름을 JSP 뷰에 종속시키지 않을 수 있다
	 -->
		<!-- view 어트리뷰트로 항상 제공할 빈 등록가능... -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views" />
		<property name="suffix" value=".jsp" />
		<property name="order" value="1" />
	</bean>
	
	<!-- <bean id="viewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver" >
		<property name="vi"></property>
	</bean> -->
	
	<bean id="viewResolver" class="org.springframework.web.servlet.view.tiles3.TilesViewResolver">
<!-- 	    <property name="viewClass" value="org.springframework.web.servlet.view.tiles3.TilesViewResolver" /> -->
	    <property name="order" value="0" />

	</bean>
	<bean id="tilesConfigurer"
	    class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
	    <property name="definitions">
	        <list>
	            <value>/WEB-INF/tiles.xml</value>
	        </list>
	    </property>
	</bean>
	
	<!-- View(JSP) 에서 사용할 공통 빈(WiseMetaConfig) 정 -->
	
	
	<!-- * Configure the multipart resolver (Byte) 
	     * 파일업로드에 사용하는 객체
	     * bean id를 multipartResolver로 해야만 동작한다
	     ** maxUploadSize(최대업로드 가능한 바이트 크기)
	-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
    	<property name="maxUploadSize" value="2000000000"/>
    </bean>
    
    <bean id="customJacksonMapper" class="kr.wise.commons.helper.CustomJacksonObjectMapper" />
<!--     <bean id="jacksonSerializationConfig" class="org.codehaus.jackson.map.SerializationConfig" -->
<!--     	factory-bean="customJacksonMapper" factory-method="getSerializationConfig" /> -->
<!-- 	<bean -->
<!-- 	    class="org.springframework.beans.factory.config.MethodInvokingFactoryBean"> -->
<!-- 	    <property name="targetObject" ref="jacksonSerializationConfig" /> -->
<!-- 	    <property name="targetMethod" value="setSerializationInclusion" /> -->
<!-- 	    <property name="arguments"> -->
<!-- 	        <list> -->
<!-- 	            <value type="org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion">NON_NULL</value> -->
<!-- 	        </list> -->
<!-- 	    </property> -->
<!-- 	</bean> -->
    
    
    <!-- * 어노테이션 기법을 사용해 controller를 사용한다
         * 어떤 class든지 어노테이션으로 설정되면 controller로 사용할 수 있다
      -->
      
  <mvc:annotation-driven >
    <mvc:message-converters>
        <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
            <property name="objectMapper" ref="customJacksonMapper" />
        </bean>
    </mvc:message-converters>
 </mvc:annotation-driven>

	
	<!-- 서블릿 오류 발생시 처리 -->
	<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="defaultErrorView" value="/commons/error/errorPage"/>
		<property name="exceptionMappings">
			<props>
				<prop key="java.lang.Exception">/commons/error/errorPage</prop>
				<prop key="kr.wise.commons.cmm.exception.WiseBizException">/commons/error/bizerrorPage</prop>
			</props>
		</property>
<!-- 		<property name="exceptionMappings"> -->
<!-- 			<props> -->
<!-- 				<prop key="org.springframework.dao.DataAccessException">egovframework/com/cmm/error/dataAccessFailure</prop> -->
<!-- 				<prop key="org.springframework.transaction.TransactionException">egovframework/com/cmm/error/dataAccessFailure</prop> -->
<!-- 				<prop key="egovframework.rte.fdl.cmmn.exception.EgovBizException">egovframework/com/cmm/error/egovBizException</prop> -->
<!-- 				<prop key="org.springframework.web.HttpSessionRequiredException">egovframework/com/uat/uia/EgovLoginUsr</prop> -->
<!-- 			</props> -->
<!-- 		</property> -->
	</bean>
	
	
	    <!--인증된 유저의 LoginVO, 권한, 인증 여부를 확인 할 수있는 서비스 클래스-->
    <bean id="userDetailHelper" class="kr.wise.commons.helper.UserDetailHelper">
        <property name="userDetailsService">
        	<!-- 원하는 bean id를 아래에 ref 태그에 적용한다 -->
<!--             <ref bean="testUserDetailsService" /> -->
            <ref bean="userDetailsSessionService" />
        </property>
    </bean>
 
    <!-- 0. 세션/시큐리티를 제외한 테스트위한 인증(더미)을 사용하는 빈 -->
<!--     <bean id="testUserDetailsService" class="kr.wise.commons.cmm.service.impl.TestUserDetailServiceImpl"/> -->
 
    <!-- 1. 세션을 이용한 인증을 사용하는 빈 -->
    <bean id="userDetailsSessionService" class="kr.wise.commons.cmm.service.impl.UserDetailSessionServiceImpl"/>
 
    <!-- 2. 시큐리티를 이용한 인증을 사용할 빈 -->
    <!--<bean id="egovUserDetailsSecurityService" class="egovframework.com.sec.ram.service.impl.EgovUserDetailsSecurityServiceImpl"/>-->
    
    
    	<!--  login Log Aspect -->
	<bean id="common.loginlog" class="kr.wise.commons.sysmgmt.log.connlog.service.LoginLogAspect" />

	<aop:config>
		<aop:aspect id="common.loginLogAspect" ref="common.loginlog">
			<!--  로그인 Method -->
			<aop:after pointcut="execution(public * kr.wise.portal.IndexController.checkLogin(..))" method="logLogin" />
			<aop:after pointcut="execution(public * kr.wise.portal.IndexController.checkSsoLogin(..))" method="logLogin" />
			<!--  로그아웃 Method -->
			<aop:before pointcut="execution(public * kr.wise.portal.IndexController.logout(..))" method="logLogout" />
		</aop:aspect>
		
		<aop:aspect id="usergmenuinit" ref="UsergMenuMapService">
			<!-- 메뉴 초기화.... -->
			<aop:after pointcut="execution(public * kr.wise.commons.sysmgmt.menu.web.MenuManageCtrl.regList(..))" method="init_menumap" />
			<aop:after pointcut="execution(public * kr.wise.commons.sysmgmt.menu.web.MenuManageCtrl.saveMenuRow(..))" method="init_menumap" />
			<aop:after pointcut="execution(public * kr.wise.commons.sysmgmt.menu.web.MenuManageCtrl.deleteMenu(..))" method="init_menumap" />
			<!-- 메뉴 권한 초기화... -->
			<aop:after pointcut="execution(public * kr.wise.commons.sysmgmt.menu.web.UsergMenuMapCtrl.regSchList(..))" method="init_menumap" />
		</aop:aspect>
	</aop:config>
	
	<aop:aspectj-autoproxy/>
	<bean class="kr.wise.commons.handler.RequestMstAspect" />
</beans>
